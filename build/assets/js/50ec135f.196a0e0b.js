"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9405],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?o.createElement(h,r(r({ref:n},p),{},{components:t})):o.createElement(h,r({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,r=new Array(i);r[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5201:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},assets:function(){return p},toc:function(){return u},default:function(){return m}});var o=t(7462),a=t(3366),i=(t(7294),t(3905)),r=["components"],s={},l="Development",c={unversionedId:"concepts/development",id:"concepts/development",title:"Development",description:"In Fusio an action contains the business logic of your API. It i.e. inserts data to a database or returns specific data",source:"@site/docs/concepts/development.md",sourceDirName:"concepts",slug:"/concepts/development",permalink:"/docs/concepts/development",editUrl:"https://github.com/apioo/fusio-docs/edit/main/docs/concepts/development.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dependency Injection",permalink:"/docs/concepts/dependency_injection"},next:{title:"Event",permalink:"/docs/concepts/event"}},p={},u=[{value:"Folder structure",id:"folder-structure",level:2},{value:"Deployment",id:"deployment",level:2},{value:"Connections",id:"connections",level:2},{value:"Actions",id:"actions",level:2},{value:"PHP Class",id:"php-class",level:3},{value:"PHP File",id:"php-file",level:3},{value:"HTTP Url",id:"http-url",level:3},{value:"Static file",id:"static-file",level:3},{value:"Migrations",id:"migrations",level:2}],d={toc:u};function m(e){var n=e.components,t=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"development"},"Development"),(0,i.kt)("p",null,"In Fusio an action contains the business logic of your API. It i.e. inserts data to a database or returns specific data\nfor an endpoint. To give you a first impression the following action shows how to insert a todo entry:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Action\\Todo;\n\nuse App\\Model\\Todo;\nuse Fusio\\Engine\\ActionAbstract;\nuse Fusio\\Engine\\ContextInterface;\nuse Fusio\\Engine\\ParametersInterface;\nuse Fusio\\Engine\\RequestInterface;\n\nclass Insert extends ActionAbstract\n{\n    public function handle(RequestInterface $request, ParametersInterface $configuration, ContextInterface $context)\n    {\n        /** @var \\Doctrine\\DBAL\\Connection $connection */\n        $connection = $this->connector->getConnection('System');\n\n        $body = $request->getPayload();\n        $now  = new \\DateTime();\n\n        assert($body instanceof Todo);\n\n        $connection->insert('app_todo', [\n            'status' => 1,\n            'title' => $body->getTitle(),\n            'insert_date' => $now->format('Y-m-d H:i:s'),\n        ]);\n\n        return $this->response->build(201, [], [\n            'success' => true,\n            'message' => 'Insert successful',\n        ]);\n    }\n}\n\n")),(0,i.kt)("p",null,"At the code we get the ",(0,i.kt)("inlineCode",{parentName:"p"},"System")," connection which returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"\\Doctrine\\DBAL\\Connection")," instance. We have already\n",(0,i.kt)("a",{parentName:"p",href:"https://www.fusio-project.org/adapter"},"many adapters")," to connect to different services. Then we simply fire some\nqueries and return the response."),(0,i.kt)("p",null,"We have also a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apioo/fusio-sample-cms"},"CMS demo app")," which is a headless CMS build with Fusio\nwhich shows how to design and structure a more complex app."),(0,i.kt)("h2",{id:"folder-structure"},"Folder structure"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resources/config.yaml"),(0,i.kt)("br",{parentName:"li"}),"Contains common config values of your API"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resources/connections.yaml"),(0,i.kt)("br",{parentName:"li"}),"Contains all available connections which can be used at an action. The ",(0,i.kt)("inlineCode",{parentName:"li"},"System")," connection to the Fusio database is\nalways available"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resources/routes.yaml"),(0,i.kt)("br",{parentName:"li"}),"Contains all routes of your API. Each route points to a dedicated ",(0,i.kt)("inlineCode",{parentName:"li"},"yaml")," file which contains all information about the\nendpoint"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"src/Action"),(0,i.kt)("br",{parentName:"li"}),"Contains all actions"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"src/Migrations"),(0,i.kt)("br",{parentName:"li"}),"Contains migrations which can be executed on a specific connection. To execute those migrations on the ",(0,i.kt)("inlineCode",{parentName:"li"},"System"),"\nconnection you can run the following command: ",(0,i.kt)("inlineCode",{parentName:"li"},"php bin/fusio migration:migrate --connection=System")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"src/Model"),(0,i.kt)("br",{parentName:"li"}),"Contains all models which are used at your actions. You can also automatically generate those models, please take a\nlook at the ",(0,i.kt)("inlineCode",{parentName:"li"},"gen/")," folder")),(0,i.kt)("h2",{id:"deployment"},"Deployment"),(0,i.kt)("p",null,"To tell Fusio about all the routes, actions and connections which you define at the ",(0,i.kt)("inlineCode",{parentName:"p"},"yaml")," files you need to run the\ndeploy command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"php bin/fusio deploy\n")),(0,i.kt)("p",null,"This deploys the .yaml files at the ",(0,i.kt)("inlineCode",{parentName:"p"},"resource/")," folder. It inserts the defined routes (i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"/todo"),") and creates the\nfitting schemas."),(0,i.kt)("p",null,"The todo API uses a simple table ",(0,i.kt)("inlineCode",{parentName:"p"},"app_todo")," to store all entries. To create this table you also need to run the\nmigration files defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/Migrations"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"php bin/fusio migration:migrate --connection=System\n")),(0,i.kt)("p",null,"Now you should be able to visit the ",(0,i.kt)("inlineCode",{parentName:"p"},"/todo")," endpoint."),(0,i.kt)("p",null,"The deployment system provides a way to store all metadata about the routes and schemas inside simple ",(0,i.kt)("inlineCode",{parentName:"p"},".yaml")," files. The\nfiles are located at the ",(0,i.kt)("inlineCode",{parentName:"p"},"resources/")," folder. Through the ",(0,i.kt)("inlineCode",{parentName:"p"},"php bin/fusio deploy")," command it is then possible to insert\nthis metadata into a Fusio instance."),(0,i.kt)("p",null,"This has the advantage that you can simply rebuild your complete API on a new installation with simply running the\n",(0,i.kt)("inlineCode",{parentName:"p"},"deploy")," command without the need to share a database. Also it has the big advantage that you can put your configuration\nunder version control."),(0,i.kt)("h2",{id:"connections"},"Connections"),(0,i.kt)("p",null,"Fusio was designed to work with multiple database connections. By default it creates the ",(0,i.kt)("inlineCode",{parentName:"p"},"System")," connection which works\non the same database where also Fusio is installed. If you want to place your app on a different database you can easily\ncreate a new connection at the ",(0,i.kt)("inlineCode",{parentName:"p"},"resources/connections.yaml")," file. There it is also possible to define connections to\nvarious other systems. These connections can then be used in your action."),(0,i.kt)("h2",{id:"actions"},"Actions"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"src/")," folder contains the action code which is executed if a request arrives at an endpoint. How Fusio executes\nthis code depends on the provided action string. The following engines are available. Please take a look at the\n",(0,i.kt)("inlineCode",{parentName:"p"},"doc/action/")," folder to see example action implementations."),(0,i.kt)("h3",{id:"php-class"},"PHP Class"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'action: "App\\\\Todo\\\\CollectionAction"\n')),(0,i.kt)("p",null,"If the action string is a PHP class Fusio tries to autoload this class through composer. The class must implement the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Fusio\\Engine\\ActionInterface"),". This is the most advanced solution since it is also possible to access services from the\nDI container. In the following an example implementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Todo;\n\nuse Fusio\\Engine\\ActionAbstract;\nuse Fusio\\Engine\\ContextInterface;\nuse Fusio\\Engine\\ParametersInterface;\nuse Fusio\\Engine\\RequestInterface;\n\nclass CollectionAction extends ActionAbstract\n{\n    public function handle(RequestInterface $request, ParametersInterface $configuration, ContextInterface $context)\n    {\n        // @TODO handle request and return response\n\n        return $this->response->build(200, [], [\n            'message' => 'Hello World!',\n        ]);\n    }\n}\n")),(0,i.kt)("h3",{id:"php-file"},"PHP File"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'action: "${dir.src}/Todo/collection.php"\n')),(0,i.kt)("p",null,"If the action points to a file with a ",(0,i.kt)("inlineCode",{parentName:"p"},"php")," file extension Fusio simply includes this file. In the following an example\nimplementation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n/**\n * @var \\Fusio\\Engine\\ConnectorInterface $connector\n * @var \\Fusio\\Engine\\ContextInterface $context\n * @var \\Fusio\\Engine\\RequestInterface $request\n * @var \\Fusio\\Engine\\Response\\FactoryInterface $response\n * @var \\Fusio\\Engine\\ProcessorInterface $processor\n * @var \\Fusio\\Engine\\DispatcherInterface $dispatcher\n * @var \\Psr\\Log\\LoggerInterface $logger\n * @var \\Psr\\SimpleCache\\CacheInterface $cache\n */\n\n// @TODO handle request and return response\n\n$response->build(200, [], [\n    'message' => 'Hello World!',\n]);\n")),(0,i.kt)("h3",{id:"http-url"},"HTTP Url"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'action: "http://foo.bar"\n')),(0,i.kt)("p",null,"If the action contains an ",(0,i.kt)("inlineCode",{parentName:"p"},"http")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"https")," url the request gets forwarded to the defined endpoint. Fusio automatically\nadds some additional headers to the request which may be used by the endpoint i.e.:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-http"},"X-Fusio-Route-Id: 72\nX-Fusio-User-Anonymous: 1\nX-Fusio-User-Id: 4\nX-Fusio-App-Id: 3\nX-Fusio-App-Key: 1ba7b2e5-fa1a-4153-8668-8a855902edda\nX-Fusio-Remote-Ip: 127.0.0.1\n")),(0,i.kt)("h3",{id:"static-file"},"Static file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'action: "${dir.src}/static.json"\n')),(0,i.kt)("p",null,"If the action points to a simple file Fusio will simply forward the content to the client. This is helpful if you want\nto build fast an sample API with dummy responses."),(0,i.kt)("h2",{id:"migrations"},"Migrations"),(0,i.kt)("p",null,"Fusio integrates the ",(0,i.kt)("a",{parentName:"p",href:"https://www.doctrine-project.org/projects/migrations.html"},"Doctrine Migrations")," system to easily\nmake database schema changes on different connections. Fusio determines the connection based on the ",(0,i.kt)("inlineCode",{parentName:"p"},"--connection"),"\noption. If you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"System")," connection (which is created by default) it will work on the same database where Fusio\nis installed but it will ignore all ",(0,i.kt)("inlineCode",{parentName:"p"},"fusio_")," tables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"php bin/fusio migration:migrate --connection=System\n")),(0,i.kt)("p",null,"The migration classes are placed inside ",(0,i.kt)("inlineCode",{parentName:"p"},"src/Migrations")," folder. The folder below must be the name of your connection.\nThrough this way you can easily define multiple migrations for different connections."),(0,i.kt)("p",null,"To create a new migration class you can simply run the ",(0,i.kt)("inlineCode",{parentName:"p"},"generate")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"php bin/fusio migration:generate --connection=System\n")),(0,i.kt)("p",null,"For more information please take a look at the website of ",(0,i.kt)("a",{parentName:"p",href:"https://www.doctrine-project.org/projects/migrations.html"},"Doctrine Migrations"),".\nThe following commands are available:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"migration:execute     Execute a single migration version up or down manually.\nmigration:generate    Generate a blank migration class.\nmigration:latest      Outputs the latest version number\nmigration:migrate     [install] Execute a migration to a specified version or the latest available version.\nmigration:status      View the status of a set of migrations.\nmigration:up-to-date  Tells you if your schema is up-to-date.\nmigration:version     Manually add and delete migration versions from the version table.\n")))}m.isMDXComponent=!0}}]);