"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5146],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=p(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||l[f]||i;return t?r.createElement(m,c(c({ref:n},u),{},{components:t})):r.createElement(m,c({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=d;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var p=2;p<i;p++)c[p]=t[p];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6295:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),c=["components"],a={},s="Dependency Injection",p={unversionedId:"concepts/dependency_injection",id:"concepts/dependency_injection",title:"Dependency Injection",description:"Fusio uses a DI container to manage all internal services. In Fusio all services are defined in a simple PHP class so",source:"@site/docs/concepts/dependency_injection.md",sourceDirName:"concepts",slug:"/concepts/dependency_injection",permalink:"/docs/concepts/dependency_injection",editUrl:"https://github.com/apioo/fusio-docs/edit/main/docs/concepts/dependency_injection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Business logic",permalink:"/docs/concepts/business_logic"},next:{title:"Event",permalink:"/docs/concepts/event"}},u=[],l={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dependency-injection"},"Dependency Injection"),(0,i.kt)("p",null,"Fusio uses a DI container to manage all internal services. In Fusio all services are defined in a simple PHP class so\nthere is no yaml configuration. To define a custom service you need to create a container class i.e. at\n",(0,i.kt)("inlineCode",{parentName:"p"},"src/Dependency/Container.php"),". This class then needs to extend the Fusio container:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Dependency;\n\nuse Fusio\\Impl\\Dependency\\Container as FusioContainer;\n\nclass Container extends FusioContainer\n{\n    public function getMyService(): MyServiceInterface\n    {\n        return new MyService(\n            $this->get('connector')->getConnection('System'),\n            $this->get('engine_dispatcher')\n        );\n    }\n}\n")),(0,i.kt)("p",null,"In this example we simply define a new service. To use this container you need to create a new instance of this\ncontainer at the ",(0,i.kt)("inlineCode",{parentName:"p"},"container.php")," file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n$container = new Fusio\\Impl\\Dependency\\Container();\n$container->setParameter('config.file', __DIR__ . '/configuration.php');\n\nreturn $container;\n")),(0,i.kt)("p",null,"Then you can use the autowire feature of the DI container to receive the dependencies through constructor injection. In\nthe following we create an action which automatically receives the ",(0,i.kt)("inlineCode",{parentName:"p"},"MyServiceInterface")," based on the type-hint. It is\nimportant that the type-hint and the return type of the method at the DI container match."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Action\\Page;\n\nuse Fusio\\Engine\\ActionAbstract;\nuse Fusio\\Engine\\ContextInterface;\nuse Fusio\\Engine\\ParametersInterface;\nuse Fusio\\Engine\\RequestInterface;\n\nclass MyAction extends ActionAbstract\n{\n    private $myService;\n\n    public function __construct(MyServiceInterface $myService)\n    {\n        $this->myService = $myService;\n    }\n\n    public function handle(RequestInterface $request, ParametersInterface $configuration, ContextInterface $context)\n    {\n        $body = [\n            'result' => $this->myService->doStuff();\n        ];\n\n        return $this->response->build(200, [], $body);\n    }\n}\n")),(0,i.kt)("p",null,"We have created also a sample project showing all best practices of Fusio at:\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/apioo/fusio-sample-cms"},"https://github.com/apioo/fusio-sample-cms")))}d.isMDXComponent=!0}}]);