"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4283],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(g,s(s({ref:n},u),{},{components:t})):r.createElement(g,s({ref:n},u))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=d;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2029:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),s=["components"],a={},l="Social Login",c={unversionedId:"concepts/social_login",id:"concepts/social_login",title:"Social Login",description:"Fusio provides a developer portal where consumers of your API can register and create their apps. Besides the",source:"@site/docs/concepts/social_login.md",sourceDirName:"concepts",slug:"/concepts/social_login",permalink:"/docs/concepts/social_login",editUrl:"https://github.com/apioo/fusio-docs/edit/main/docs/concepts/social_login.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Serialization",permalink:"/docs/concepts/serialization"},next:{title:"Testing",permalink:"/docs/concepts/testing"}},u=[{value:"Flow",id:"flow",children:[],level:2},{value:"Implementation",id:"implementation",children:[],level:2}],p={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"social-login"},"Social Login"),(0,i.kt)("p",null,"Fusio provides a developer portal where consumers of your API can register and create their apps. Besides the\ntraditional sign-up via email and password Fusio provides a system to allow 3rd party providers. By default Fusio\nsupports:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Facebook"),(0,i.kt)("li",{parentName:"ul"},"Google"),(0,i.kt)("li",{parentName:"ul"},"Github")),(0,i.kt)("p",null,"But it is also easy possible to add other providers. The provider must support OAuth2 in order to work with Fusio."),(0,i.kt)("h2",{id:"flow"},"Flow"),(0,i.kt)("p",null,"The javascript app starts the authentication process by redirecting the user to the provider. I.e. the developer app\nuses the AngularJS satellizer module to start this process. If the user returns, your app needs to send a POST request\nto the endpoint ",(0,i.kt)("inlineCode",{parentName:"p"},"/consumer/provider/google")," providing the following payload:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "code": "",\n  "clientId": ""\n  "redirectUri": ""\n}\n')),(0,i.kt)("p",null,"Then on the server side Fusio will try to obtain an access token using the code and client id. Fusio knows also the\nclient secret of the provider which you need to provide at the ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file. If this was successful Fusio tries to get\nsome additional information about the user (this step depends always on the remote provider how you get information\nabout the user)."),(0,i.kt)("p",null,"If everything went fine Fusio creates a new \u201cremote\u201d user entry (if the id does not already exists) and returns directly\nan JWT which can be used in any subsequent API calls:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "token": ""\n}\n')),(0,i.kt)("h2",{id:"implementation"},"Implementation"),(0,i.kt)("p",null,"If you want to add a new provider you need to create a class which implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"Fusio\\Engine\\User\\ProviderInterface"),".\nThen you need to register this class in your provider.php file. To give you an example how such a provider might look\nplease take a look at our Google provider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Fusio\\Impl\\Provider\\User;\n\nuse Fusio\\Engine\\User\\ProviderInterface;\nuse Fusio\\Engine\\User\\UserDetails;\nuse Fusio\\Impl\\Base;\nuse Fusio\\Impl\\Service\\Config;\nuse PSX\\Http\\Client\\ClientInterface;\nuse PSX\\Http\\Client\\GetRequest;\nuse PSX\\Http\\Client\\PostRequest;\nuse PSX\\Json\\Parser;\nuse PSX\\Uri\\Url;\n\nclass Google implements ProviderInterface\n{\n    private ClientInterface $httpClient;\n    private string $secret;\n\n    public function __construct(ClientInterface $httpClient, Config $config)\n    {\n        $this->httpClient = $httpClient;\n        $this->secret     = $config->getValue('provider_google_secret');\n    }\n\n    public function getId(): int\n    {\n        return self::PROVIDER_GOOGLE;\n    }\n\n    public function requestUser(string $code, string $clientId, string $redirectUri): ?UserDetails\n    {\n        $accessToken = $this->getAccessToken($code, $clientId, $this->secret, $redirectUri);\n        if (empty($accessToken)) {\n            return null;\n        }\n\n        $url = new Url('https://www.googleapis.com/userinfo/v2/me');\n\n        $headers = [\n            'Authorization' => 'Bearer ' . $accessToken,\n            'User-Agent'    => Base::getUserAgent()\n        ];\n\n        $response = $this->httpClient->request(new GetRequest($url, $headers));\n        if ($response->getStatusCode() !== 200) {\n            return null;\n        }\n\n        $data  = Parser::decode((string) $response->getBody());\n        $id    = $data->id ?? null;\n        $name  = $data->name ?? null;\n        $email = $data->email ?? null;\n\n        if (!empty($id) && !empty($name)) {\n            return new UserDetails($id, $name, $email);\n        } else {\n            return null;\n        }\n    }\n\n    protected function getAccessToken(string $code, string $clientId, string $clientSecret, string $redirectUri): ?string\n    {\n        $url = new Url('https://oauth2.googleapis.com/token');\n\n        $params = [\n            'code'          => $code,\n            'client_id'     => $clientId,\n            'client_secret' => $clientSecret,\n            'redirect_uri'  => $redirectUri,\n            'grant_type'    => 'authorization_code'\n        ];\n\n        $headers = [\n            'Accept'     => 'application/json',\n            'User-Agent' => Base::getUserAgent()\n        ];\n\n        $response = $this->httpClient->request(new PostRequest($url, $headers, $params));\n\n        if ($response->getStatusCode() !== 200) {\n            return null;\n        }\n\n        $data = Parser::decode((string) $response->getBody());\n        if (isset($data->access_token)) {\n            return $data->access_token;\n        } else {\n            return null;\n        }\n    }\n}\n")))}d.isMDXComponent=!0}}]);