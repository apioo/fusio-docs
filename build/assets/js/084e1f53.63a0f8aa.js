"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[469],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return d}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),f=u(r),d=n,m=f["".concat(s,".").concat(d)]||f[d]||p[d]||o;return r?a.createElement(m,i(i({ref:t},l),{},{components:r})):a.createElement(m,i({ref:t},l))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9722:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return f}});var a=r(7462),n=r(3366),o=(r(7294),r(3905)),i=["components"],c={},s="Create API from Database",u={unversionedId:"use_cases/create_api_from_database",id:"use_cases/create_api_from_database",title:"Create API from Database",description:"Fusio provides a way to automatically create a REST API based on a database table. It creates automatically the fitting",source:"@site/docs/use_cases/create_api_from_database.md",sourceDirName:"use_cases",slug:"/use_cases/create_api_from_database",permalink:"/docs/use_cases/create_api_from_database",editUrl:"https://github.com/apioo/fusio-docs/edit/main/docs/use_cases/create_api_from_database.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Use-Cases",permalink:"/docs/use_cases/"},next:{title:"Create API from ElasticSearch",permalink:"/docs/use_cases/create_api_from_elasticsearch"}},l=[],p={toc:l};function f(e){var t=e.components,c=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,c,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-api-from-database"},"Create API from Database"),(0,o.kt)("p",null,"Fusio provides a way to automatically create a REST API based on a database table. It creates automatically the fitting\nroutes, actions and schemas. This can be useful if you want to quickly create a CRUD API. To do this you need to go to\nthe routes panel and click there on the top right briefcase button, then you should see the following dialog:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"routes_provider_sql_table",src:r(7412).Z,width:"1318",height:"727"})),(0,o.kt)("p",null,"For the ",(0,o.kt)("inlineCode",{parentName:"p"},"Connection")," you need to select the database connection which you want to use for the API and the ",(0,o.kt)("inlineCode",{parentName:"p"},"Table")," must\ncontain a valid table name. If you click on the changelog button you should see the following output:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"routes_provider_sql_table_changelog",src:r(9216).Z,width:"1302",height:"795"})),(0,o.kt)("p",null,"There you see the routes, actions and schemas which the import would create."))}f.isMDXComponent=!0},7412:function(e,t,r){t.Z=r.p+"assets/images/routes_provider_sql_table-798404c35e9775f1882014673358454e.png"},9216:function(e,t,r){t.Z=r.p+"assets/images/routes_provider_sql_table_changelog-9982a3d28a97c95dedaff471bbafdecb.png"}}]);