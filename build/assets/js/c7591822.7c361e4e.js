"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6060],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),i=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=i(e.components);return o.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=i(n),d=r,y=p["".concat(l,".").concat(d)]||p[d]||m[d]||s;return n?o.createElement(y,a(a({ref:t},u),{},{components:n})):o.createElement(y,a({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var i=2;i<s;i++)a[i]=n[i];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4655:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return i},assets:function(){return u},toc:function(){return m},default:function(){return d}});var o=n(7462),r=n(3366),s=(n(7294),n(3905)),a=["components"],c={},l="Deployment system",i={unversionedId:"use_cases/deployment_system",id:"use_cases/deployment_system",title:"Deployment system",description:"Fusio has a deployment system which allows you to store your complete Fusio configuration into .yaml config files.",source:"@site/docs/use_cases/deployment_system.md",sourceDirName:"use_cases",slug:"/use_cases/deployment_system",permalink:"/docs/use_cases/deployment_system",editUrl:"https://github.com/apioo/fusio-docs/edit/main/docs/use_cases/deployment_system.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create API from MongoDB",permalink:"/docs/use_cases/create_api_from_mongodb"},next:{title:"Develop custom action",permalink:"/docs/use_cases/develop_custom_action"}},u={},m=[{value:"Routes",id:"routes",level:2},{value:"Models",id:"models",level:2},{value:"Action",id:"action",level:2},{value:"Deployment",id:"deployment",level:2}],p={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"deployment-system"},"Deployment system"),(0,s.kt)("p",null,"Fusio has a deployment system which allows you to store your complete Fusio configuration into ",(0,s.kt)("inlineCode",{parentName:"p"},".yaml")," config files.\nThis allows you to store all config in a VCS so that you can easily reproduce a Fusio installation without sharing a\ndatabase. The deploy system internally also only talks to the REST API which is used by the backend app. If you want to\nsee a complex example you can take a look at our ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/apioo/fusio-sample-cms"},"headless CMS repository"),"\nwhich uses the deploy system to build a headless CMS."),(0,s.kt)("h2",{id:"routes"},"Routes"),(0,s.kt)("p",null,"All routes are stored in dedicated ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/apioo/fusio-sample-cms/blob/master/resources/routes.yaml"},"routes"),"\nfile which includes for each route a detail yaml file."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'"/page": !include resources/routes/page/collection.yaml\n"/page/:page_id": !include resources/routes/page/entity.yaml\n"/post": !include resources/routes/post/collection.yaml\n"/post/:post_id": !include resources/routes/post/entity.yaml\n"/comment": !include resources/routes/comment/collection.yaml\n"/comment/:comment_id": !include resources/routes/comment/entity.yaml\n')),(0,s.kt)("p",null,"The routes detail yaml file contains all information about a route which you can also provide at the backend. In this\nexample we use as schema model classes which we have generated. Your action then also automatically receives those\ngenerated model classes."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'version: 1\nscopes: ["comment"]\nmethods:\n  GET:\n    public: true\n    description: "Returns all available comments"\n    parameters: "App\\\\Model\\\\Comment_Query"\n    responses: \n      200: "App\\\\Model\\\\Comment_Collection"\n      500: "App\\\\Model\\\\Message"\n    action: "App\\\\Action\\\\Comment\\\\GetAll"\n  POST:\n    public: false\n    description: "Creates a new comment"\n    request: "App\\\\Model\\\\Comment"\n    responses: \n      201: "App\\\\Model\\\\Message"\n      500: "App\\\\Model\\\\Message"\n    action: "App\\\\Action\\\\Comment\\\\Create"\n')),(0,s.kt)("h2",{id:"models"},"Models"),(0,s.kt)("p",null,"All models are generated through a TypeSchema definition. Please take a look at the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/apioo/fusio-sample-cms/tree/master/gen"},"gen/"),"\nfolder which contains hte script to generate the models based on a TypeSchema definition."),(0,s.kt)("h2",{id:"action"},"Action"),(0,s.kt)("p",null,"Each action uses a service to handle a specific resource. I.e. the comment create action only invokes the create method\nof the comment service so that the action does not contain any complex logic."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"class Create extends ActionAbstract\n{\n    private Comment $commentService;\n\n    public function __construct(Comment $commentService)\n    {\n        $this->commentService = $commentService;\n    }\n\n    public function handle(RequestInterface $request, ParametersInterface $configuration, ContextInterface $context)\n    {\n        try {\n            $id = $this->commentService->create(\n                $request->getPayload(),\n                $context\n            );\n\n            $message = new Message();\n            $message->setSuccess(true);\n            $message->setMessage('Comment successful created');\n            $message->setId($id);\n        } catch (StatusCodeException $e) {\n            throw $e;\n        } catch (\\Throwable $e) {\n            throw new InternalServerErrorException($e->getMessage());\n        }\n\n        return $this->response->build(201, [], $message);\n    }\n}\n")),(0,s.kt)("h2",{id:"deployment"},"Deployment"),(0,s.kt)("p",null,"Through the command ",(0,s.kt)("inlineCode",{parentName:"p"},"php bin/fusio deploy")," you can deploy the API. This command reads all ",(0,s.kt)("inlineCode",{parentName:"p"},".yaml")," files and\ncreates/updates all resources through the API."))}d.isMDXComponent=!0}}]);