"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4425],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=o.createContext({}),l=function(e){var n=o.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(a.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),d=i,f=m["".concat(a,".").concat(d)]||m[d]||u[d]||r;return t?o.createElement(f,c(c({ref:n},p),{},{components:t})):o.createElement(f,c({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,c=new Array(r);c[0]=m;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s.mdxType="string"==typeof e?e:i,c[1]=s;for(var l=2;l<r;l++)c[l]=t[l];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5495:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return a},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var o=t(7462),i=t(3366),r=(t(7294),t(3905)),c=["components"],s={},a="Business logic",l={unversionedId:"concepts/business_logic",id:"concepts/business_logic",title:"Business logic",description:"In case your API is not a simple CRUD app you probably need to execute some more complex business logic. This chapter",source:"@site/docs/concepts/business_logic.md",sourceDirName:"concepts",slug:"/concepts/business_logic",permalink:"/docs/concepts/business_logic",editUrl:"https://github.com/apioo/fusio-docs/edit/main/docs/concepts/business_logic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Authorization",permalink:"/docs/concepts/authorization"},next:{title:"Dependency Injection",permalink:"/docs/concepts/dependency_injection"}},p=[{value:"Library",id:"library",children:[],level:2},{value:"Microservice",id:"microservice",children:[],level:2}],u={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,c);return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"business-logic"},"Business logic"),(0,r.kt)("p",null,"In case your API is not a simple CRUD app you probably need to execute some more complex business logic. This chapter\nshows options how you can organize this business logic for simple reuse."),(0,r.kt)("p",null,"In general an action should not contain any business logic it should simply forward the data to the fitting library or\nservice. It is equivalent to a controller in a classical framework environment. If an action contains too many lines of\ncode or you copy specific code snippets into different actions it is a smell to extract this logic into an external\nservice. Inside an action you can then reuse this external service."),(0,r.kt)("p",null,"Fusio is designed to help you write framework independent code. That means that all services which you develop are\ncomplete free of Fusio specific code so you can simply reuse those components in another context."),(0,r.kt)("h2",{id:"library"},"Library"),(0,r.kt)("p",null,"The simplest solution is to move business logic into a separate PHP class. This class can be autoloaded through\ncomposer. You can place this class either directly into the ",(0,r.kt)("inlineCode",{parentName:"p"},"src/")," folder or develop a custom PHP package and require\nthis package through composer."),(0,r.kt)("p",null,"In general a library should work with a specific connection. The following example shows a simple custom logger\nimplementation which you could use in different actions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n$connection = $connector->get('Mysql-1');\n\n$myLogger = new MyLogger($connection);\n$myLogger->log('A new log entry');\n")),(0,r.kt)("p",null,"A simple implementation of the logger could look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Acme\\MyLib;\n\nuse Doctrine\\DBAL\\Connection;\n\nclass MyLogger\n{\n    /**\n     * @var \\Doctrine\\DBAL\\Connection\n     */\n    protected $connection;\n\n    public function __construct(Connection $connection)\n    {\n        $this->connection = $connection;\n    }\n\n    public function log($message)\n    {\n        $this->connection->insert('my_table', [\n            'message' => $message,\n        ]);\n    }\n}\n")),(0,r.kt)("h2",{id:"microservice"},"Microservice"),(0,r.kt)("p",null,"If your business logic is more complex or has specific performance requirements you could also develop it as an external\nmicroservice. This has the advantage that service is completely decoupled from your app and it is also possible to use a\ncomplete different language. Usually you can talk to the microservice through HTTP. But it would be also possible to use\na different protocol i.e. an AMQP connection to use a message queue."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\n$client = $connector->get('Http-1');\n\n$myClient = new MyClient($client);\n$myClient->send(['foo' => 'bar']);\n")),(0,r.kt)("p",null,"A simple client implementation could look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Acme\\MyLib;\n\nuse GuzzleHttp\\Client;\n\nclass MyClient\n{\n    /**\n     * @var \\GuzzleHttp\\Client\n     */\n    protected $client;\n\n    public function __construct(Client $client)\n    {\n        $this->client = $client;\n    }\n\n    public function send($data)\n    {\n        $this->client->post('http://foo.bar/my_service', [\n            'json' => $data\n        ]);\n    }\n}\n")))}m.isMDXComponent=!0}}]);